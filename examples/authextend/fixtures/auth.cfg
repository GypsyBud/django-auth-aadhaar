
# Configuration for the authentication client 

common: { 

    # Change this to 'testing' if you are testing the generation 
    # of outgoing message 
    mode: 'staging',

    # Specific to this AuA
    sa: "public", 
    tid: "public", 
    ac: "public",
    license_key:  "MKg8njN6O+QRUmYF+TrbBUCqlrCnbN/Ns6hYbnnaOk99e5UGNhhE/xQ=",
    private_key: 'fixtures/public_key.pem',  # note that public refers to
    public_cert: 'fixtures/public_cert.pem', # public AuA 
    pkcs_path: "fixtures/public.p12",
    pkcs_password: "public",
    uid_cert_path: "fixtures/uidai_auth_stage.cer",

    # shared by all 
    encryption_algorithm: 'aes_256_ecb',
    rsa_key_len: 32, 
    sha256_length: 256,    
    ver: "1.5",
    auth_url: 'http://auth.uidai.gov.in/1.5/'    
    data_xmlns: "http://www.uidai.gov.in/authentication/uid-auth-request-data/1.0",
    request_xmlns:"http://www.uidai.gov.in/authentication/uid-auth-request/1.0",
    request_xsd: 'xsd/uid-auth-request.xsd',
    response_xsd: 'xsd/uid-auth-response.xsd'   
    
    # debugging
    logfile: 'execution.log',
    loglevel: "WARN",

}

request: $request_demo

request_demo: {

    # What to authenticate? 
    demographics: ["Pi"],
    biometrics: []

    command: "generate",
    uid: "999999990019",    
    Pi: { 
    	name: "Shivshankar Choudhury",
	ms: "E"
    }

    # What extra should I do with the xmls? 
    analyze: True,

    # temporary files and what to do with them 
    xml: "/tmp/request.xml",
    signedxml: "/tmp/request.xml.sig",
    xmlcleanup: True

}
# => used by request.py
request_bio: { 
    
    #=> is the XML signature template in the XML file 
    use_template: False, 
    
    # What to authenticate
    demographics: [],
    biometrics: ["FMR"],

    #=> Input data
    command: "generate",
    uid: "999999990019",
    name: "Shivshankar Choudhury",

    FMR:{
        bio: "Rk1SACAyMAAAAADkAAgAyQFnAMUAxQEAAAARIQBqAGsgPgCIAG0fRwC2AG2dSQBVAIUjPABuALShMgCxAL0jMAByAM6lPgCmAN2kQQBwAN8qNAB1AN8mPADJAOcgOQA8AOorNABoAOomOQC+AO2fMQDFAPqlSgCvAP8lRQB8AQuhPABwAQ4fMgB7ASqcRADAAS4iNwCkATMeMwCFATYeNwBLATYwMQBWATcoMQCkATecMQBEATwyMgBJAUciQQCkAU8cNQB9AVQWNgCEAVUVRACoAVgYOgBBAV69NgCsAWeYNwAA"     },

    # What extra should I do with the xmls? 
    analyze: True,

    # temporary files and what to do with them 
    xml: "/tmp/request.xml",
    signedxml: "/tmp/request.xml.sig",
    xmlcleanup: True
}

#=> Used by response.py
response: $response_validate

response_validate: { 

    # What response.py do? 
    command: "validate",
    xml: "fixtures/authresponse.xml"
}

#=> used by crypt.py 
# Mainly for testing the x509 and AES encryption/decryption functionality. 
crypt: $crypt_test

crypt_test: {
    command: "test",
    msg: "qwrtttrtyutyyyyy",
    key: "sdkfsdfldfh123213213" 
}

# => used by signature.py
# Mostly to specify the input and output files.
sign: $sign_default 

sign_default: {
    command: 'sign'
    xml: 'fixtures/authrequest.xml',
    signedxml: 'fixtures/authrequest.xml.sig',
}

# Verify the signature in a signed xml
sign_verify: {
    command: 'verify'
    signedxml: 'fixtures/authrequest.xml.sig',
}


#=> used by validate.py 
# Configuration for the AuthXML validator
validate: $validate_xml_only

validate_xml_only: {
    
    #=> extract: extract the Data, Hmac and Skey 
    command: 'xml-only'
    
    #=> Input file 
    xml: '/tmp/request.xml.sig',
    
    # Is this file signed? If signed, then we cant run the XSD check 
    # on the file. 
    signed: True, 
}

batch: $batch_default

batch_default: {
    json: 'fixtures/test_data.json'
}
